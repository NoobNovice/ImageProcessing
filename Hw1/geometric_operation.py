import numpy as np
import os
import cv2
import math

def get_metrixImage(img_input):
    f = open(img_input,'rb')

    data = f.readline()
    img_type = data.decode('utf-8')
    #data = f.readline()  #delete commend image

    data = f.readline()
    size = data.decode('utf-8')
    row,col = size.split(" ")
    row = int(row)
    col = int(col)

    data = f.readline()
    Dmax = int(data.decode('utf-8'))
    metrix = []  #init histogram
    for y in range(0, row):
        temp = []
        for x in range(0,col):
            data = f.read(1)
            temp.append(ord(data))
        metrix.append(temp)
    return metrix

def save2pgm(img_metrix,file_name):
    row = len(img_metrix)
    col = len(img_metrix[0])
    f = open(file_name,'w',encoding="ISO-8859-1")
    f.write("P5\r")
    f.write("#\r")
    f.write(str(row)+" "+str(col)+"\r")
    f.write("255\r")
    for i in range(row):
        for j in range(col):
            f.write((chr(img_metrix[i][j])))
    f.close()
    return

def checkEqual(elements):
    if len(elements) < 1 or len(elements) == elements.count(elements[0]):
        return True
    else:
        return False

def get_gridPoint():
    point = [[[0,0],[15,0],[31,0],[47,0],[63,0],[79,0],[95,0],[111,0],[127,0],[143,0],[159,0],[175,0],[191,0],[207,0],[223,0],[239,0],[255,0]],
             [[0,15],[15,15],[31,15],[47,15],[63,15],[79,15],[95,15],[111,15],[127,15],[143,15],[159,15],[175,15],[191,15],[207,15],[223,15],[239,15],[255,15]],
             [[0,31],[15,31],[31,31],[47,31],[63,31],[79,31],[95,31],[111,31],[127,31],[143,31],[159,31],[175,31],[191,31],[207,31],[223,31],[239,31],[255,31]],
             [[0,47],[15,47],[31,47],[47,47],[63,47],[79,47],[95,47],[111,47],[127,47],[143,47],[159,47],[175,47],[191,47],[207,47],[223,47],[239,47],[255,47]],
             [[0,63],[15,63],[31,63],[47,63],[63,63],[79,63],[95,63],[111,63],[127,63],[143,63],[159,63],[175,63],[191,63],[207,63],[223,63],[239,63],[255,63]],
             [[0,79],[15,79],[31,79],[47,79],[63,79],[79,79],[95,79],[111,79],[127,79],[143,79],[159,79],[175,79],[191,79],[207,79],[223,79],[239,79],[255,79]],
             [[0,95],[15,95],[31,95],[47,95],[63,95],[79,95],[95,95],[111,95],[127,95],[143,95],[159,95],[175,95],[191,95],[207,95],[223,95],[239,95],[255,95]],
             [[0,111],[15,111],[31,111],[47,111],[63,111],[79,111],[95,111],[111,111],[127,111],[143,111],[159,111],[175,111],[191,111],[207,111],[223,111],[239,111],[255,111]],
             [[0,127],[15,127],[31,127],[47,127],[63,127],[79,127],[95,127],[111,127],[127,127],[143,127],[159,127],[175,127],[191,127],[207,127],[223,127],[239,127],[255,127]],
             [[0,143],[15,143],[31,143],[47,143],[63,143],[79,143],[95,143],[111,143],[127,143],[143,143],[159,143],[175,143],[191,143],[207,143],[223,143],[239,143],[255,143]],
             [[0,159],[15,159],[31,159],[47,159],[63,159],[79,159],[95,159],[111,159],[127,159],[143,159],[159,159],[175,159],[191,159],[207,159],[223,159],[239,159],[255,159]],
             [[0,175],[15,175],[31,175],[47,175],[63,175],[79,175],[95,175],[111,175],[127,175],[143,175],[159,175],[175,175],[191,175],[207,175],[223,175],[239,175],[255,175]],
             [[0,191],[15,191],[31,191],[47,191],[63,191],[79,191],[95,191],[111,191],[127,191],[143,191],[159,191],[175,191],[191,191],[207,191],[223,191],[239,191],[255,191]],
             [[0,207],[15,207],[31,207],[47,207],[63,207],[79,207],[95,207],[111,207],[127,207],[143,207],[159,207],[175,207],[191,207],[207,207],[223,207],[239,207],[255,207]],
             [[0,223],[15,223],[31,223],[47,223],[63,223],[79,223],[95,223],[111,223],[127,223],[143,223],[159,223],[175,223],[191,223],[207,223],[223,223],[239,223],[255,223]],
             [[0,239],[15,239],[31,239],[47,239],[63,239],[79,239],[95,239],[111,239],[127,239],[143,239],[159,239],[175,239],[191,239],[207,239],[223,239],[239,239],[255,239]],
             [[0,255],[15,255],[31,255],[47,255],[63,255],[79,255],[95,255],[111,255],[127,255],[143,255],[159,255],[175,255],[191,255],[207,255],[223,255],[239,255],[255,255]]
            ]
    return point

def get_distGridPoint():                                                                            
    point = [[[0,0],[15,0],[31,0],[47,0],[63,0],[79,0],[95,0],[111,0],[127,0],[143,0],[159,0],[175,0],[191,0],[207,0],[223,0],[239,0],[255,0]],
             [[0,15],[15,15],[31,15],[47,15],[63,15],[79,15],[96,16],[113,17],[129,18],[145,18],[160,17],[175,16],[191,15],[207,15],[223,15],[239,15],[255,15]],
             [[0,31],[15,31],[31,31],[47,31],[65,33],[84,34],[102,36],[120,39],[135,41],[149,42],[162,41],[176,37],[191,34],[207,32],[223,31],[239,31],[255,31]],
             [[0,47],[15,47],[31,47],[50,48],[71,49],[92,52],[111,56],[127,60],[140,62],[153,64],[165,64],[177,62],[191,56],[207,50],[223,48],[239,47],[255,47]],
             [[0,63],[15,63],[33,63],[55,63],[78,64],[99,67],[116,71],[130,75],[143,79],[155,83],[166,84],[178,83],[189,80],[205,72],[223,66],[239,63],[255,63]],
             [[0,79],[16,79],[36,78],[61,77],[83,78],[102,80],[118,84],[131,89],[143,94],[154,99],[164,101],[175,102],[187,100],[202,93],[220,85],[239,79],[255,79]],
             [[0,95],[17,95],[40,93],[64,91],[84,89],[102,91],[117,95],[130,101],[140,107],[150,113],[160,116],[171,117],[184,116],[199,111],[217,103],[237,97],[255,95]],
             [[0,111],[18,110],[42,106],[64,100],[83,101],[99,101],[114,105],[126,111],[136,117],[145,124],[154,130],[166,131],[180,131],[196,127],[214,120],[236,113],[255,111]],
             [[0,127],[18,126],[41,119],[62,114],[81,111],[95,111],[109,114],[120,119],[128,127],[137,135],[147,140],[160,143],[175,143],[192,141],[212,136],[235,129],[255,127]],
             [[0,143],[17,141],[39,135],[59,128],[76,123],[89,124],[102,125],[112,129],[120,136],[130,143],[142,150],[155,153],[171,155],[189,153],[211,149],[235,145],[255,143]],
             [[0,159],[16,158],[37,151],[56,143],[71,139],[84,137],[95,137],[105,141],[114,146],[125,154],[137,159],[152,164],[169,166],[190,165],[213,163],[237,160],[255,159]],
             [[0,175],[15,175],[34,170],[52,162],[68,155],[80,152],[91,152],[101,156],[112,159],[123,164],[136,170],[152,174],[171,177],[192,177],[216,176],[238,175],[255,175]],
             [[0,191],[15,191],[32,189],[50,181],[65,175],[78,170],[89,169],[100,170],[111,174],[124,179],[138,183],[155,187],[174,189],[197,191],[220,192],[239,191],[255,191]],
             [[0,207],[15,207],[31,206],[48,204],[64,197],[77,192],[89,189],[101,189],[113,191],[127,194],[142,198],[160,201],[181,205],[203,205],[222,207],[239,207],[255,207]],
             [[0,223],[15,223],[31,223],[47,222],[63,221],[79,216],[92,212],[105,211],[118,212],[133,214],[151,217],[168,219],[188,222],[207,223],[233,233],[239,233],[255,233]],
             [[0,239],[15,239],[31,239],[47,239],[63,239],[79,238],[94,237],[109,236],[125,235],[141,236],[157,237],[174,238],[191,239],[207,239],[223,239],[239,239],[255,239]],
             [[0,255],[15,255],[31,255],[47,255],[63,255],[79,255],[95,255],[111,255],[127,255],[143,255],[159,255],[175,255],[191,255],[207,255],[223,255],[239,255],[255,255]]
            ]
    return point

def get_det(metrix,value):
    if value == 0:
        return 0
    elif math.sqrt(len(metrix)) == 2:
        return ((metrix[0]*metrix[3]) - (metrix[1]*metrix[2])) * value
    else:
        r = round(math.sqrt(len(metrix)))
        sum_metrix = 0
        toggle = 1
        for t in range(r):
            #cut metrix
            cut_metrix = []
            for i in range(r):
                if i == t:
                    continue
                else:
                    for j in range(1,r):  #row and col 0 is mark
                        cut_metrix.append(metrix[(r * i) + j])
            value_pass = toggle * metrix[r*t]
            toggle = toggle * -1
            sum_metrix += (value * get_det(cut_metrix,value_pass))
        return sum_metrix

def inverse_matrix(metrix):
    det_metrix = get_det(metrix,1)
    toggle = 1
    toggle_row = -1
    r = round(math.sqrt(len(metrix)))
    result = [[0]*r for i in range(r)]
    for i in range(r):
        for j in range(r):
            cut_metrix = []
            for k in range(r):
                if k == i:
                    continue
                else:
                    for l in range(r):
                        if l == j:
                            continue
                        else:
                            cut_metrix.append(metrix[(r * k) + l])
            result[j][i] = toggle*get_det(cut_metrix,1)/det_metrix
            toggle = toggle * -1
        toggle = toggle_row
        toggle_row = toggle_row * -1
    return result

def get_w(metrix_inverse,vector_b):
    result = []
    for i in range (4) :
        sum_w = 0
        for j in range (4) :
            sum_w += ( vector_b[j] * metrix_inverse[i][j] )
        result.append(sum_w)
    return result

def bilinear_interpolation(img_metrix, x, y):
    px0 = math.trunc(x)
    py0 = math.trunc(y)
    xx = x - px0
    yy = y - py0
    f00 = img_metrix[py0][px0]
    f01 = img_metrix[py0][px0 + 1]
    f10 = img_metrix[py0 + 1][px0]
    f11 = img_metrix[py0 + 1][px0 + 1]
    return round((xx * (f10-f00)) + (yy * (f01-f00)) + (xx * yy * (f11+f00-f01-f10)) + f00)

def control_grid(grid_point,distgrid_point,img_metrix):
    x = [None]*4
    y = [None]*4
    x_prime = [None]*4
    y_prime = [None]*4
    result = [[0 for i in range(len(img_metrix))] for j in range(len(img_metrix[0]))]
    for i in range (len(distgrid_point) - 1):
        for j in range (len(distgrid_point[i]) - 1):
            x[0] = grid_point[i][j][0]
            x[1] = grid_point[i][j+1][0]
            x[2] = grid_point[i+1][j][0]
            x[3] = grid_point[i+1][j+1][0]

            y[0] = grid_point[i][j][1]
            y[1] = grid_point[i][j+1][1]
            y[2] = grid_point[i+1][j][1]
            y[3] = grid_point[i+1][j+1][1]

            x_prime[0] = distgrid_point[i][j][0]
            x_prime[1] = distgrid_point[i][j+1][0]
            x_prime[2] = distgrid_point[i+1][j][0]
            x_prime[3] = distgrid_point[i+1][j+1][0]

            y_prime[0] = distgrid_point[i][j][1]
            y_prime[1] = distgrid_point[i][j+1][1]
            y_prime[2] = distgrid_point[i+1][j][1]
            y_prime[3] = distgrid_point[i+1][j+1][1]

            vector_x = [x_prime[0],x_prime[1],x_prime[2],x_prime[3]]
            vector_y = [y_prime[0],y_prime[1],y_prime[2],y_prime[3]]

            # vector_w = metrix_inverse * vector_x or vector_y 
            metrix = [x[0],y[0],x[0]*y[0],1,
                      x[1],y[1],x[1]*y[1],1,
                      x[2],y[2],x[2]*y[2],1,
                      x[3],y[3],x[3]*y[3],1]
            metrix_inverse = inverse_matrix(metrix)

            #find w1,w2,w3,w4 in x
            wx = get_w(metrix_inverse,vector_x)
            #find w5,w6,w7,w8 in y
            wy = get_w(metrix_inverse,vector_y)

            for py in range(y[0],y[2]):
                for px in range(x[0],x[1]):
                    xx = wx[0]*px + wx[1]*py + wx[2]*px*py + wx[3]
                    yy = wy[0]*px + wy[1]*py + wy[2]*px*py + wy[3]
                    result[py][px] = bilinear_interpolation(img_metrix,xx,yy)
    return result

if __name__ == '__main__':
    dir_path = os.getcwd()

    print("\nread image")
    img = get_metrixImage(dir_path + "/Image/distlenna.pgm")

    print("\ncontrol grid")
    r = control_grid(get_gridPoint(),get_distGridPoint(),img)
    save2pgm(r,dir_path + "/Image/grid_convert1.pgm")

    image1 = cv2.imread(dir_path + "/Image/distlenna.pgm",0)
    image2 = cv2.imread(dir_path + "/Image/grid_convert.pgm",0)
    res = np.hstack((image1, image2))
    cv2.imshow('image',res)
    cv2.waitKey(0) 
    cv2.destroyAllWindows() 